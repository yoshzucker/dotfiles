#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}"
KEYWORDS_FILE="$CONFIG_DIR/.leakseek.conf"

usage() {
  cat <<EOF
Usage:
  leakseek [--help|--template]

Options:
  --help        Show this help message
  --template    Create a sample keyword file at $KEYWORDS_FILE

Description:
  Scans the current directory for keywords listed in the config file.
  You can edit the keyword file to include any sensitive words or patterns to check before pushing.

EOF
  exit 0
}

# Don't put real credentials like passw‚óèrd or tok3n here.
generate_template() {
  mkdir -p "$CONFIG_DIR"
  cat <<'TEMPLATE' > "$KEYWORDS_FILE"
# leakseek keyword file
# Add one keyword per line.
# Lines starting with '#' are ignored.
# Matching is case-insensitive.
# (A)ccount / (U)ser IDs

# (P)assword

# (T)oken / (S)ecret

# (I)nternal Network / (H)osts

# (E)mail / (D)omains

# (C)ompany Names

# (W)arn-only (optional patterns)
:warn (t)oken

TEMPLATE
  echo "‚úÖ Template created at: $KEYWORDS_FILE"
  echo "üìå Don't forget to add it to your .gitignore:"
  echo "    echo '${KEYWORDS_FILE#$HOME/}' >> .gitignore"
  exit 0
}

if [[ "${1:-}" == "--help" ]]; then
  usage
fi

if [[ "${1:-}" == "--template" ]]; then
  generate_template
fi

if [ ! -f "$KEYWORDS_FILE" ]; then
  echo "‚ö†Ô∏è  Keyword file not found at $KEYWORDS_FILE"
  echo "üí° Run 'leakseek --template' to generate one."
  exit 1
fi

echo "üîç Scanning for sensitive keywords listed in $KEYWORDS_FILE"
TARGETS=("$@")
if [[ ${#TARGETS[@]} -eq 0 ]]; then
  TARGETS=(".")
fi

GREP_BASE=(grep -RniI --color=always -i
           --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn
           --exclude-dir=node_modules --exclude-dir=.venv --exclude-dir=.idea
           --exclude-dir=.direnv
           --exclude='*.min.js' --exclude='*.lock' --exclude='*.png'
           --exclude='*.jpg' --exclude='*.gif')


found=0

mandatory_keywords=()
warn_keywords=()

# Split keywords
while IFS= read -r line || [ -n "$line" ]; do
  [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue
  if [[ "$line" == :warn* ]]; then
    warn_keywords+=("${line#:warn }")
  else
    mandatory_keywords+=("$line")
  fi
done < "$KEYWORDS_FILE"

# Scan for warn-only keywords
for keyword in "${warn_keywords[@]}"; do
  if "${GREP_BASE[@]}" -e "$keyword" "${TARGETS[@]}"; then
    echo "‚ö†Ô∏è  Warn-only match: $keyword"
  fi
done

# Scan for blocking keywords
for keyword in "${mandatory_keywords[@]}"; do
  if "${GREP_BASE[@]}" -e "$keyword" "${TARGETS[@]}"; then
    echo "‚ùå Blocked match: $keyword"
    found=1
  fi
done

if [ "$found" -eq 0 ]; then
  echo "‚úÖ No matching keywords found."
else
  echo "‚ùó Review matches before pushing."
fi

exit "$found"
